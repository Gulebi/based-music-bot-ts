import { Player } from "discord-player";
import { ChatInputCommandInteraction, EmbedBuilder } from "discord.js";
import { colors, getAvatar, getUsername } from "../utils";

export default function registerPlayerEvents(player: Player) {
    player.events.on("error", (queue, error) => {
        console.log(`[${queue.guild.name}] Error emitted from the queue: ${error.message}`);

        const interaction = queue.metadata as ChatInputCommandInteraction;
        interaction.followUp({ content: "Error!" });
    });

    player.events.on("playerError", (queue, error) => {
        console.log(`[${queue.guild.name}] Error emitted from the player: ${error.message}`);
    });

    player.events.on("audioTrackAdd", (queue, track) => {
        const interaction = queue.metadata as ChatInputCommandInteraction;

        interaction.followUp({
            embeds: [
                new EmbedBuilder()
                    .setTitle("–¢—Ä–µ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å")
                    .setColor(colors.baseColor)
                    .setDescription(`üé∂ [\`${track.title}\`](${track.url})`)
                    .addFields([{ name: "–ê–≤—Ç–æ—Ä", value: `\`${track.author}\``, inline: true }])
                    .setThumbnail(track.thumbnail)
                    .setFooter({
                        text: getUsername(interaction),
                        iconURL: getAvatar(interaction),
                    }),
            ],
        });
    });

    player.events.on("playerStart", (queue, track) => {
        const interaction = queue.metadata as ChatInputCommandInteraction;

        interaction.followUp({
            embeds: [
                new EmbedBuilder()
                    .setTitle("–°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç")
                    .setColor(colors.baseColor)
                    .setDescription(`üé∂ [\`${track.title}\`](${track.url})`)
                    .setThumbnail(track.thumbnail)
                    .addFields([
                        {
                            name: "–î–æ–±–∞–≤–ª–µ–Ω",
                            value: `\`${track.requestedBy?.username || "Someone"}\``,
                            inline: true,
                        },
                        { name: "–ê–≤—Ç–æ—Ä", value: `\`${track.author}\``, inline: true },
                        { name: "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", value: `\`${track.duration}\``, inline: true },
                    ])
                    .setFooter({
                        text: getUsername(interaction),
                        iconURL: getAvatar(interaction),
                    }),
            ],
        });
    });

    player.events.on("disconnect", (queue) => {
        const interaction = queue.metadata as ChatInputCommandInteraction;

        interaction.followUp("–ú–µ–Ω—è –≤—Ä—É—á–Ω—É—é –æ—Ç–∫–ª—é—á–∏–ª–∏ –æ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞, –æ—á–∏—â–∞—é –æ—á–µ—Ä–µ–¥—å!");
    });

    player.events.on("emptyChannel", (queue) => {
        const interaction = queue.metadata as ChatInputCommandInteraction;

        interaction.followUp("–í –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç, –ª–∏–≤–∞—é...");
    });

    player.events.on("emptyQueue", (queue) => {
        const interaction = queue.metadata as ChatInputCommandInteraction;

        interaction.followUp({
            embeds: [
                new EmbedBuilder()
                    .setTitle("–û—á–µ—Ä–µ–¥—å –∑–∞–∫–æ–Ω—á–µ–Ω–∞")
                    .setColor(colors.baseColor)
                    .setDescription("–î–æ–±–∞–≤—å—Ç–µ –≤ –æ—á–µ—Ä–µ–¥—å –±–æ–ª—å—à–µ —Ç—Ä–µ–∫–æ–≤")
                    .setFooter({
                        text: getUsername(interaction),
                        iconURL: getAvatar(interaction),
                    }),
            ],
        });
    });
}
